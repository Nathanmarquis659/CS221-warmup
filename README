****************
* Magic Squares
* CS221
* 8/29/2024
* Nathan Marquis and Mason Vail
**************** 

OVERVIEW:

 Magic Squares determines if a provided file contains a valid magic square, or alternatively can create one with a provided odd-numbered dimension and write it to a file.
 A magic square is valid when all vertical/horizontal/diagonal sets of numbers each 
 add up to (n * (n^2 + 1) / 2) where n is the side length of the matrix.

INCLUDED FILES:

 * MagicSquare.java - source file - constructors and methods for MagicSquare objects
 * MagicSquareDriver.java - source file - acts as input validation and calls for MagicSquare objects
 * MagicSquareInterface.java - source file - required methods for MagicSquare.java
 * MagicSquaresTest.java - source file - testing suite for proper design
 * README - this file


COMPILING AND RUNNING:

 From the directory containing all source files, compile the
 test class (and all dependencies) with the command:
 $ javac MagicSquaresTest.java

 Run the compiled  test class file with the command:
 $ java MagicSquaresTest

 Console output will give the results after the program finishes.


PROGRAM DESIGN AND IMPORTANT CONCEPTS:

 The class MagicSquare implements MagicSquareInterface defining methods 
 that 1) Check if a provided file contains a valid magic square, 2) Retrieve
 a matrix copy that will not effect the original, 3) Returning a properly 
 formatted string of the MagicSquare object array

 MagicSquare objects are made up of a 2d magicSquareArray and a boolean 
 of whether or not said array is a valid magic square. The array can be populated
 from a provided file using the `readMatrix()` utility method or if created from 
 scratch would be fed a filename and dimension. For the latter case the `writeMatrix()` 
 utility method will take the 2d array and write it to a file.

 The MagicSquare class houses the constructors and methods for MagicSquare 
 objects, along with the interface methods as required to retrieve, evaluate, and 
 properly format said objects. 
 
 The MagicSquareDriver acts as input validation to ensure that only input 
 formatted as follows is used:
 `"java MagicSquareDriver <-check | -create> <filename> <    |odd-size>"`
 After validation, it goes on to call the proper MagicSquare constructor, 
 whether -check or -create, to initialize a MagicSquare object. It then 
 calls `toString()` for either case and prints out a message to the user 
 showing them their matrix and if it is a magic square. 
 
 Finally, the MagicSquaresTest class will go through all test criteria to 
 verify that the program runs as described and follows rules such as encapsulation. 


TESTING:

 Testing was provided by a provided suite that looks for proper code execution
 and principles followed such as encapsulation. Input validation is done in 
 the MagicSquareDriver class by checking for the proper command of -create or
 -check. It also checks that dimensions given are odd and positive. Bad input 
 is displayed to the user with the standard usage message so that they know 
 how to properly format their input to the program. Although advised against
 catching errors, this program could be further improved with tailored 
 messages for the most common faulty inputs rather than the generic
 usage message.


DISCUSSION:
 
 This project was only a warmup, but really humbled me into going back to the
 fundamentals. I spent more time than I would like to admit looking up the most
 basic building blocks of coding in Java and how to do simple things like using 
 interfaces properly. I had to look up how to use tools like PrintWriter and
 FileWriter again to make sure that the file output was correct. I also faced
 some issues with inattentive coding causing small errors to pile up and take  
 significant time to figure out what was going wrong. Finally, algorithmically
 I made some silly mistakes that I could not figure out for a long time. Overall
 I learned a ton from this project and feel much more 'limber' in my coding 
 abilities to advance further in this class. A good wake up call!